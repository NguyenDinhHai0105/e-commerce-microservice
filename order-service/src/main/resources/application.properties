spring.application.name=order-service
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/order_db
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.show-sql: true
server.port=8082

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka/

#Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4j properties
#register a health indicator to enable see the different kind of states
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
#how much buffer size  that event consume
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4j Timeout Properties
resilience4j.ratelimiter.instance.inventory.timeout-duration=3s

#Resilience4j Retry Property
## try to attempt to retry for 3 times, if not working, just let circuit breakers handle the request
resilience4j.retry.instance.inventory.max-attempts=3
## wait for 5s before retrying the particular call, if do not get the response. just do the retry 3 times following max-attempts above
resilience4j.retry.instance.inventory.wait-duration=5s

management.tracing.sampling.probability=1.0